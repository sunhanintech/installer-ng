ServerRoot "<%= node[:scalr_server][:install_root] %>"
PidFile "<%= run_dir_for node, 'httpd' %>/httpd.pid"

DefaultRuntimeDir <%= run_dir_for node, 'httpd' %>

LoadModule authn_file_module        embedded/modules/mod_authn_file.so
LoadModule authn_core_module        embedded/modules/mod_authn_core.so
LoadModule authz_host_module        embedded/modules/mod_authz_host.so
LoadModule authz_groupfile_module   embedded/modules/mod_authz_groupfile.so
LoadModule authz_user_module        embedded/modules/mod_authz_user.so
LoadModule authz_core_module        embedded/modules/mod_authz_core.so
LoadModule access_compat_module     embedded/modules/mod_access_compat.so
LoadModule auth_basic_module        embedded/modules/mod_auth_basic.so
LoadModule deflate_module           embedded/modules/mod_deflate.so
LoadModule expires_module           embedded/modules/mod_expires.so
LoadModule reqtimeout_module        embedded/modules/mod_reqtimeout.so
LoadModule filter_module            embedded/modules/mod_filter.so
LoadModule mime_module              embedded/modules/mod_mime.so
LoadModule log_config_module        embedded/modules/mod_log_config.so
LoadModule env_module               embedded/modules/mod_env.so
LoadModule headers_module           embedded/modules/mod_headers.so
LoadModule rewrite_module           embedded/modules/mod_rewrite.so
LoadModule setenvif_module          embedded/modules/mod_setenvif.so
LoadModule version_module           embedded/modules/mod_version.so
LoadModule unixd_module             embedded/modules/mod_unixd.so
LoadModule status_module            embedded/modules/mod_status.so
LoadModule autoindex_module         embedded/modules/mod_autoindex.so
LoadModule dir_module               embedded/modules/mod_dir.so
LoadModule alias_module             embedded/modules/mod_alias.so
<% if enable_module?(node, :app) %>
LoadModule php7_module              embedded/modules/libphp7.so
<% end %>

<IfModule unixd_module>
  User    <%= node[:scalr_server][:app][:user] %>
  Group   <%= node[:scalr_server][:app][:user] %>
</IfModule>

ServerName <%= node[:scalr_server][:routing][:endpoint_host] %>
ServerAdmin <%= node[:scalr_server][:app][:email_from_address] %>

<Directory />
AllowOverride none
Require all denied
</Directory>


<IfModule dir_module>
  DirectoryIndex index.php index.html
</IfModule>

<Files ".ht*">
Require all denied
</Files>

LogLevel warn
ErrorLog  <%= log_dir_for node, 'httpd' %>/web.error.log

<IfModule log_config_module>
  LogFormat "%a (for \"%{X-Forwarded-For}i\") %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
  LogFormat "%a %l %u %t \"%r\" %>s %b" common

  CustomLog <%= log_dir_for node, 'httpd' %>/web.access.log combined
</IfModule>

<IfModule mime_module>
  TypesConfig embedded/etc/httpd/mime.types
  AddType application/x-httpd-php .php
  AddType application/x-compress .Z
  AddType application/x-gzip .gz .tgz
</IfModule>

EnableSendfile on
KeepAliveTimeout 30

<IfModule php5_module>
  PHPINIDir <%= etc_dir_for node, 'php' %>
</IfModule>

<IfModule mpm_prefork_module>
  StartServers             5
  MinSpareServers          5
  MaxSpareServers         10
  MaxRequestWorkers      250
  MaxConnectionsPerChild   0
</IfModule>


# Web #

<% enabled_web(node).each do |web| %>
    Listen <%= web[:bind_host] %>:<%= web[:bind_port] %>
<% end %>

<% enabled_web(node).each do |web| %>
    <VirtualHost *:<%= web[:bind_port] %>>
      DocumentRoot <%= web[:root] %>

      ErrorLog  <%= log_dir_for node, 'httpd' %>/web.<%= web[:name] %>.error.log
      <IfModule log_config_module>
            CustomLog <%= log_dir_for node, 'httpd' %>/web.<%= web[:name] %>.access.log combined
      </IfModule>

      <Directory <%= web[:root] %>>
        Options -Indexes +FollowSymLinks +MultiViews
        AllowOverride All
        AuthType None
        Order allow,deny
        Allow from all
        Satisfy All
        Require all granted
      </Directory>

      # NOTE: We do not use the RemoteIP Module here intentionally. The RemoteIP module consumes the X-Forwarded-For
      # header, which we want to avoid, since the Scalr app will be consuming it itself.

    </VirtualHost>
<% end %>

# Repos #

<% if enable_module?(node, :repos) %>
    Listen <%= node[:scalr_server][:repos][:bind_host] %>:<%= node[:scalr_server][:repos][:bind_port] %>

    <VirtualHost *:<%= node[:scalr_server][:repos][:bind_port] %>>
      DocumentRoot <%= node[:scalr_server][:repos][:root] %>/current

      ErrorLog  <%= log_dir_for node, 'httpd' %>/web.repos.error.log
      <IfModule log_config_module>
            CustomLog <%= log_dir_for node, 'httpd' %>/web.repos.access.log combined
      </IfModule>

      <Directory <%= node[:scalr_server][:repos][:root] %>/current>
        Options +Indexes +FollowSymLinks +MultiViews
        AllowOverride None
        AuthType None
        Order allow,deny
        Allow from all
        Satisfy All
        Require all granted
      </Directory>

    </VirtualHost>

<% end %>

# Proxy #

<% if enable_module?(node, :proxy) %>
    LoadModule proxy_module                 embedded/modules/mod_proxy.so

    LoadModule slotmem_shm_module           embedded/modules/mod_slotmem_shm.so
    LoadModule proxy_balancer_module        embedded/modules/mod_proxy_balancer.so
    LoadModule lbmethod_byrequests_module   embedded/modules/mod_lbmethod_byrequests.so

    LoadModule proxy_http_module            embedded/modules/mod_proxy_http.so

    <% if node[:scalr_server][:proxy][:ssl_enable] %>
        LoadModule ssl_module embedded/modules/mod_ssl.so
        Listen <%= node[:scalr_server][:proxy][:bind_host] %>:<%= node[:scalr_server][:proxy][:ssl_bind_port] %>

        <VirtualHost <%= node[:scalr_server][:proxy][:bind_host] %>:<%= node[:scalr_server][:proxy][:ssl_bind_port] %>>
          SSLEngine             on
          SSLCertificateFile    <%= node[:scalr_server][:proxy][:ssl_cert_path] %>
          SSLCertificateKeyFile <%= node[:scalr_server][:proxy][:ssl_key_path] %>
          SSLProtocol all -SSLv2 -SSLv3
          SSLCipherSuite ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:AES256-SHA:AES128-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK

          <%= render 'httpd/_proxy_partial.erb' %>
          RequestHeader add X-Forwarded-Port <%= node[:scalr_server][:proxy][:ssl_bind_port] %>
          RequestHeader add X-Forwarded-Proto https

          ErrorLog  <%= log_dir_for node, 'httpd' %>/web.proxy-ssl.error.log
          <IfModule log_config_module>
                CustomLog <%= log_dir_for node, 'httpd' %>/web.proxy-ssl.access.log combined
          </IfModule>

          <%= node[:scalr_server][:proxy][:apache_config] %>

        </VirtualHost>
    <% end %>

    Listen <%= node[:scalr_server][:proxy][:bind_host] %>:<%= node[:scalr_server][:proxy][:bind_port] %>

    <VirtualHost <%= node[:scalr_server][:proxy][:bind_host] %>:<%= node[:scalr_server][:proxy][:bind_port] %>>
      <% if node[:scalr_server][:proxy][:ssl_enable] and node[:scalr_server][:proxy][:ssl_redirect] %>
          Redirect / https://<%= node[:scalr_server][:routing][:endpoint_host] %>/
          # TODO - endpoint_port
      <% else %>
        <%= render 'httpd/_proxy_partial.erb' %>
        RequestHeader add X-Forwarded-Port <%= node[:scalr_server][:proxy][:bind_port] %>
        RequestHeader add X-Forwarded-Proto http
      <% end %>
      ErrorLog  <%= log_dir_for node, 'httpd' %>/web.proxy.error.log
      <IfModule log_config_module>
            CustomLog <%= log_dir_for node, 'httpd' %>/web.proxy.access.log combined
      </IfModule>

      <%= node[:scalr_server][:proxy][:apache_config] %>

    </VirtualHost>

    <Proxy balancer://app>
    <% node[:scalr_server][:proxy][:app_upstreams].each do |upstream| %>
        BalancerMember http://<%= upstream %> connectiontimeout=10 timeout=90
    <% end %>
    </Proxy>

    <Proxy balancer://graphics>
    <% node[:scalr_server][:proxy][:graphics_upstreams].each do |upstream| %>
        BalancerMember http://<%= upstream %> connectiontimeout=10 timeout=90
    <% end %>
    </Proxy>

    <Proxy balancer://plotter>
    <% node[:scalr_server][:proxy][:plotter_upstreams].each do |upstream| %>
        BalancerMember http://<%= upstream %>/load_statistics connectiontimeout=10 timeout=90
    <% end %>
    </Proxy>

    <Proxy balancer://repos>
    <% node[:scalr_server][:proxy][:repos_upstreams].each do |upstream| %>
        BalancerMember http://<%= upstream %> connectiontimeout=10 timeout=90
    <% end %>
    </Proxy>

<% end %>
